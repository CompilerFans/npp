#!/bin/bash

# Advanced code style cleanup script for MPP project
# Removes AI-style comments, emoji, and vendor-specific terms

set -e

# Create backup
BACKUP_DIR="backup_advanced_$(date +%Y%m%d_%H%M%S)"
echo "Creating backup in $BACKUP_DIR..."
mkdir -p "$BACKUP_DIR"
cp -r src/ test/ "$BACKUP_DIR/"

# Function to process files
process_file() {
    local file="$1"
    echo "Processing: $file"
    
    # Skip API header files - they should not be modified
    if [[ "$file" == api/* ]]; then
        echo "  Skipping API header file: $file"
        return
    fi
    
    # Create temporary file
    local temp_file=$(mktemp)
    
    # Process the file with comprehensive cleanup
    sed -e '
        # Remove AI-style emotional/enthusiastic comments
        s/\(\/\/.*\)[!]{2,}[^!]*$/\1/g
        s/\(\/\/.*\)ÈùûÂ∏∏[^Ôºå„ÄÇ]*//g
        s/\(\/\/.*\)Âæà[^Ôºå„ÄÇ]*//g
        s/\(\/\/.*\)Ë∂ÖÁ∫ß[^Ôºå„ÄÇ]*//g
        s/\(\/\/.*\)ÂÆåÁæé[^Ôºå„ÄÇ]*//g
        s/\(\/\/.*\)‰ºòÁßÄ[^Ôºå„ÄÇ]*//g
        s/\(\/\/.*\)amazing[^Ôºå„ÄÇ]*//gi
        s/\(\/\/.*\)awesome[^Ôºå„ÄÇ]*//gi
        s/\(\/\/.*\)fantastic[^Ôºå„ÄÇ]*//gi
        s/\(\/\/.*\)excellent[^Ôºå„ÄÇ]*//gi
        s/\(\/\/.*\)perfect[^Ôºå„ÄÇ]*//gi
        s/\(\/\/.*\)wonderful[^Ôºå„ÄÇ]*//gi
        
        # Remove emoji and special characters
        s/[üéØüöÄüí°‚ö°üîßüé®üåü‚ú®üí™üé™üé≠üé™üíéüèÜüéñÔ∏èüéÅüéäüéâüî•üíØ‚≠êÔ∏è‚úÖ‚ùå‚ö†Ô∏èüî¥üü¢üü°üîµ]//g
        s/[üòÄüòÉüòÑüòÅüòÜüòä‚ò∫Ô∏èüòáü§óü§îüí≠üéàüéÄüéÅüéÇüéÉüéÑüéÜüéáüéà]//g
        
        # Convert Chinese technical comments to concise English
        s/\/\/.*ÂÆûÁé∞[^Ôºå„ÄÇ]*ÂäüËÉΩ/\/\/ Implementation/g
        s/\/\/.*Â§ÑÁêÜ[^Ôºå„ÄÇ]*Êï∞ÊçÆ/\/\/ Process data/g
        s/\/\/.*È™åËØÅ[^Ôºå„ÄÇ]*ÂèÇÊï∞/\/\/ Validate parameters/g
        s/\/\/.*Ê£ÄÊü•[^Ôºå„ÄÇ]*Êù°‰ª∂/\/\/ Check conditions/g
        s/\/\/.*ËÆ°ÁÆó[^Ôºå„ÄÇ]*ÁªìÊûú/\/\/ Calculate result/g
        s/\/\/.*ÂàÜÈÖç[^Ôºå„ÄÇ]*ÂÜÖÂ≠ò/\/\/ Allocate memory/g
        s/\/\/.*ÈáäÊîæ[^Ôºå„ÄÇ]*ËµÑÊ∫ê/\/\/ Free resources/g
        s/\/\/.*Ë∞ÉÁî®[^Ôºå„ÄÇ]*ÂÜÖÊ†∏/\/\/ Call kernel/g
        s/\/\/.*ÂêØÂä®[^Ôºå„ÄÇ]*Á∫øÁ®ã/\/\/ Launch threads/g
        s/\/\/.*ÂêåÊ≠•[^Ôºå„ÄÇ]*Êìç‰Ωú/\/\/ Synchronize/g
        s/\/\/.*ÈîôËØØ[^Ôºå„ÄÇ]*Â§ÑÁêÜ/\/\/ Error handling/g
        s/\/\/.*ÊÄßËÉΩ[^Ôºå„ÄÇ]*‰ºòÂåñ/\/\/ Performance optimization/g
        s/\/\/.*ËæπÁïå[^Ôºå„ÄÇ]*Ê£ÄÊü•/\/\/ Boundary check/g
        s/\/\/.*Êï∞ÊçÆ[^Ôºå„ÄÇ]*Á±ªÂûã/\/\/ Data type/g
        s/\/\/.*ÂõæÂÉè[^Ôºå„ÄÇ]*Â§ÑÁêÜ/\/\/ Image processing/g
        s/\/\/.*ÂÉèÁ¥†[^Ôºå„ÄÇ]*Êìç‰Ωú/\/\/ Pixel operation/g
        s/\/\/.*Áü©Èòµ[^Ôºå„ÄÇ]*ËøêÁÆó/\/\/ Matrix operation/g
        s/\/\/.*ÂêëÈáè[^Ôºå„ÄÇ]*ËÆ°ÁÆó/\/\/ Vector computation/g
        s/\/\/.*Êª§Ê≥¢[^Ôºå„ÄÇ]*ÁÆóÊ≥ï/\/\/ Filter algorithm/g
        s/\/\/.*ÂΩ¢ÊÄÅÂ≠¶[^Ôºå„ÄÇ]*Êìç‰Ωú/\/\/ Morphology operation/g
        s/\/\/.*ÁªüËÆ°[^Ôºå„ÄÇ]*ËÆ°ÁÆó/\/\/ Statistical computation/g
        s/\/\/.*Âá†‰Ωï[^Ôºå„ÄÇ]*ÂèòÊç¢/\/\/ Geometric transform/g
        s/\/\/.*È¢úËâ≤[^Ôºå„ÄÇ]*ËΩ¨Êç¢/\/\/ Color conversion/g
        
        # Remove verbose AI-style descriptions
        s/\/\/.*Ëøô‰∏™ÂáΩÊï∞[^Ôºå„ÄÇ]*ÂÆûÁé∞‰∫Ü[^Ôºå„ÄÇ]*ÁÆóÊ≥ï[^Ôºå„ÄÇ]*//g
        s/\/\/.*Ê≠§ÊñπÊ≥ï[^Ôºå„ÄÇ]*Êèê‰æõ‰∫Ü[^Ôºå„ÄÇ]*ÂäüËÉΩ[^Ôºå„ÄÇ]*//g
        s/\/\/.*ËØ•ÂáΩÊï∞[^Ôºå„ÄÇ]*ÊîØÊåÅ[^Ôºå„ÄÇ]*ÁâπÊÄß[^Ôºå„ÄÇ]*//g
        s/\/\/.*Êú¨ÂÆûÁé∞[^Ôºå„ÄÇ]*ÈááÁî®‰∫Ü[^Ôºå„ÄÇ]*ÊäÄÊúØ[^Ôºå„ÄÇ]*//g
        
        # Replace vendor-specific terms with generic equivalents
        s/CUDA/GPU/g
        s/cuda/gpu/g
        s/NVIDIA/Generic/g
        s/nvidia/generic/g
        s/GeForce/Graphics/g
        s/Tesla/Compute/g
        s/Quadro/Professional/g
        s/cuDNN/Deep Learning/g
        s/CUBLAS/Linear Algebra/g
        s/CUFFT/FFT Library/g
        s/Thrust/Parallel Library/g
        s/NCCL/Communication Library/g
        
        # Simplify function documentation
        s/\/\*\*$/\/\*/g
        s/^ \* \*$/\*/g
        s/^ \* @brief [^.]*\./\/\/ /g
        s/^ \* @param [^.]*\./\/\/ /g
        s/^ \* @return [^.]*\./\/\/ /g
        s/^ \* @note [^.]*\./\/\/ /g
        s/^ \* @warning [^.]*\./\/\/ /g
        
        # Remove redundant comments
        s/\/\/.*Implementation file.*//g
        s/\/\/.*ÂÆûÁé∞Êñá‰ª∂.*//g
        s/\/\/.*Ê∫êÊñá‰ª∂.*//g
        s/\/\/.*Â§¥Êñá‰ª∂.*//g
        s/\/\/.*ÂåÖÂê´Êñá‰ª∂.*//g
        
        # Clean up empty comment lines
        s/^[[:space:]]*\/\/[[:space:]]*$//g
        
        # Remove multiple consecutive empty lines
        /^$/N
        /^\n$/d
        
    ' "$file" > "$temp_file"
    
    # Apply additional processing for specific patterns
    python3 -c "
import re
import sys

with open('$temp_file', 'r', encoding='utf-8') as f:
    content = f.read()

# Remove AI-style verbose comments patterns
content = re.sub(r'//.*ËøôÈáåÊàë‰ª¨.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*ËÆ©Êàë‰ª¨.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*Áé∞Âú®Êàë‰ª¨.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*È¶ñÂÖà.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*ÁÑ∂Âêé.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*ÊúÄÂêé.*', '// ', content, flags=re.MULTILINE)
content = re.sub(r'//.*Êé•‰∏ãÊù•.*', '// ', content, flags=re.MULTILINE)

# Remove comments with multiple exclamation marks
content = re.sub(r'//.*!{2,}.*', '//', content, flags=re.MULTILINE)

# Clean up redundant whitespace
content = re.sub(r'\n\s*\n\s*\n', '\n\n', content, flags=re.MULTILINE)

# Ensure file ends with newline
if not content.endswith('\n'):
    content += '\n'

with open('$temp_file', 'w', encoding='utf-8') as f:
    f.write(content)
"
    
    # Only update if file content changed
    if ! cmp -s "$file" "$temp_file"; then
        mv "$temp_file" "$file"
        echo "  Updated: $file"
    else
        rm "$temp_file"
        echo "  No changes: $file"
    fi
}

# Process all source and test files
echo "Processing source files..."
find src/ -type f \( -name "*.cpp" -o -name "*.cu" -o -name "*.h" -o -name "*.hpp" \) | while read -r file; do
    process_file "$file"
done

echo "Processing test files..."
find test/ -type f \( -name "*.cpp" -o -name "*.cu" -o -name "*.h" -o -name "*.hpp" \) | while read -r file; do
    process_file "$file"
done

# Special processing for specific vendor term replacements in code
echo "Applying vendor-specific term replacements..."
find src/ test/ -type f \( -name "*.cpp" -o -name "*.cu" -o -name "*.h" -o -name "*.hpp" \) | while read -r file; do
    # Skip API directory
    if [[ "$file" == api/* ]]; then
        continue
    fi
    
    # Apply replacements but preserve NPP API calls and error constants
    sed -i '
        # Preserve NPP constants and API calls
        /NPP_/!{
            /npp[A-Z]/!{
                # Replace function names but preserve NPP prefixes
                s/\([^_]\)cuda\([A-Z]\)/\1gpu\2/g
                s/\([^_]\)Cuda\([A-Z]\)/\1Gpu\2/g
                # Replace in comments and strings
                s/CUDA kernel/GPU kernel/g
                s/CUDA device/GPU device/g
                s/CUDA stream/GPU stream/g
                s/CUDA runtime/GPU runtime/g
                s/CUDA memory/GPU memory/g
                s/CUDA context/GPU context/g
                # But preserve CUDA API calls like cudaMalloc, cudaMemcpy etc.
            }
        }
    ' "$file"
done

echo "Advanced code style cleanup completed!"
echo "Backup created in: $BACKUP_DIR"
echo ""
echo "Summary of changes applied:"
echo "  - Removed AI-style emotional/enthusiastic comments"
echo "  - Removed all emoji and special characters"
echo "  - Converted Chinese technical comments to concise English"
echo "  - Replaced vendor-specific terms with generic equivalents"
echo "  - Simplified function documentation"
echo "  - Cleaned up redundant and empty comments"
echo "  - Preserved API headers and NPP-specific terms"
echo ""
echo "Please verify the changes and run tests to ensure functionality is preserved."