 /* Copyright 2025-2025 MetaX CORPORATION & AFFILIATES.  All rights reserved. 
  * 
  * NOTICE TO LICENSEE: 
  * 
  * The source code and/or documentation ("Licensed Deliverables") are 
  * subject to MetaX intellectual property rights under U.S. and 
  * international Copyright laws. 
  * 
  * The Licensed Deliverables contained herein are PROPRIETARY and 
  * CONFIDENTIAL to MetaX and are being provided under the terms and 
  * conditions of a form of MetaX software license agreement by and 
  * between MetaX and Licensee ("License Agreement") or electronically 
  * accepted by Licensee.  Notwithstanding any terms or conditions to 
  * the contrary in the License Agreement, reproduction or disclosure 
  * of the Licensed Deliverables to any third party without the express 
  * written consent of MetaX is prohibited. 
  * 
  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  * LICENSE AGREEMENT, MetaX MAKES NO REPRESENTATION ABOUT THE 
  * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  THEY ARE 
  * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND. 
  * MetaX DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED 
  * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, 
  * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. 
  * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE 
  * LICENSE AGREEMENT, IN NO EVENT SHALL MetaX BE LIABLE FOR ANY 
  * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY 
  * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
  * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
  * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
  * OF THESE LICENSED DELIVERABLES. 
  * 
  * U.S. Government End Users.  These Licensed Deliverables are a 
  * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT 
  * 1995), consisting of "commercial computer software" and "commercial 
  * computer software documentation" as such terms are used in 48 
  * C.F.R. 12.212 (SEPT 1995) and are provided to the U.S. Government 
  * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and 
  * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all 
  * U.S. Government End Users acquire the Licensed Deliverables with 
  * only those rights set forth herein. 
  * 
  * Any use of the Licensed Deliverables in individual and commercial 
  * software must include, in the user documentation and internal 
  * comments to the code, the above Disclaimer and U.S. Government End 
  * Users Notice. 
  */ 
#ifndef MC_MPPI_ARITHMETIC_AND_LOGICAL_OPERATIONS_H
#define MC_MPPI_ARITHMETIC_AND_LOGICAL_OPERATIONS_H
 
/**
 * \file mppi_arithmetic_and_logical_operations.h
 * Image Arithmetic and Logical Operations.
 */
 
#include "mppdefs.h"


#ifdef __cplusplus
extern "C" {
#endif


/** 
 * \page image_arithmetic_and_logical_operations Arithmetic and Logical Operations
 * @defgroup image_arithmetic_and_logical_operations Arithmetic and Logical Operations
 * @ingroup mppi
 * @{
 *
 * These functions can be found in the mppial library. Linking to only the sub-libraries that you use can significantly
 * save link time, application load time, and MACA runtime startup time when using dynamic libraries.
 */

/** 
 * \section image_arithmetic_operations Arithmetic Operations
 * @defgroup image_arithmetic_operations Arithmetic Operations
 * The set of image processing arithmetic operations available in the library.
 * @{
 */

/** 
 * \section image_addc AddC
 * @defgroup image_addc AddC
 *
 * Adds a constant value to each pixel of an image. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory Constant. 
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling. 
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */ 
MppStatus 
mppiAddC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory Constant. 
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */ 
MppStatus 
mppiAddC_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant pointer to device memory Constant. 
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling. 
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstant, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C1IRSfs_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C1IRSfs(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstant pointer to device memory Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C1IRSfs_Ctx(const Mpp8u * pConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C3IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C3IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C3IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_AC4IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_AC4IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_AC4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C4IRSfs_Ctx(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_8u_C4IRSfs(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_8u_C4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstant, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);


/** 
 * One 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C1IRSfs_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C1IRSfs(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C1IRSfs_Ctx(const Mpp16u * pConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C3IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
  * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C3IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C3IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_AC4IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_AC4IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_AC4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C4IRSfs_Ctx(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16u_C4IRSfs(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16u_C4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstant, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C1IRSfs_Ctx(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C1IRSfs(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C1IRSfs_Ctx(const Mpp16s * pConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C3IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C3IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C3IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                           Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                     Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_AC4IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_AC4IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_AC4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);
/** 
 * Four 16-bit signed short channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C4IRSfs_Ctx(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16s_C4IRSfs(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16s_C4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step. 
 * \param nConstant host memory constant. 
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step. 
 * \param nConstant host memory constant. 
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C1IRSfs_Ctx(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C1IRSfs(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C3IRSfs_Ctx(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_C3IRSfs(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                                Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                            Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_AC4IRSfs_Ctx(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16sc_AC4IRSfs(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstant, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C1IRSfs_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C1IRSfs(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32s_C1IRSfs_Ctx(const Mpp32s * pConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstants, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C3IRSfs_Ctx(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32s_C3IRSfs(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image add constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32s_C3IRSfs_Ctx(const Mpp32s * pConstants, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C1IRSfs_Ctx(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C1IRSfs(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C3IRSfs_Ctx(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_C3IRSfs(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                                Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image add constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                            Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_AC4IRSfs_Ctx(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image add constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32sc_AC4IRSfs(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image add constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C1IR_Ctx(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image add constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C1IR(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image add constant.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C1IR_Ctx(const Mpp32f * pConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C3IR(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image add constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C3IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_16f_C4IR(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image add constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_16f_C4IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image add constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C1IR_Ctx(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image add constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C1IR(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image add constant.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C1IR_Ctx(const Mpp32f * pConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C3IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image add constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C3IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                            Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                        Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                  Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_AC4IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_AC4IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image add constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_AC4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);


/** 
 * Four 32-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image add constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32f_C4IR(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image add constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddDeviceC_32f_C4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C1IR_Ctx(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C1IR(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[3], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[3], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C3IR_Ctx(const Mpp32fc aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C3IR(const Mpp32fc aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[3], 
                             Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus 
mppiAddC_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[3], 
                         Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_AC4IR_Ctx(const Mpp32fc aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_AC4IR(const Mpp32fc aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[4], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image add constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc aConstants[4], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C4IR_Ctx(const Mpp32fc aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image add constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddC_32fc_C4IR(const Mpp32fc aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_addc */ 

/** 
 * \section image_mulc MulC
 * @defgroup image_mulc MulC
 *
 * Multiplies each pixel of an image by a constant value. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstant, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C1IRSfs_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C1IRSfs(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C1IRSfs_Ctx(const Mpp8u * pConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C3IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C3IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C3IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_AC4IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_AC4IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_AC4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C4IRSfs_Ctx(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_8u_C4IRSfs(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_8u_C4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstant, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);


/** 
 * One 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C1IRSfs_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C1IRSfs(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C1IRSfs_Ctx(const Mpp16u * pConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C3IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C3IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C3IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_AC4IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_AC4IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_AC4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C4IRSfs_Ctx(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16u_C4IRSfs(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16u_C4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstant, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C1IRSfs_Ctx(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C1IRSfs(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C1IRSfs_Ctx(const Mpp16s * pConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C3IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C3IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C3IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                           Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                     Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_AC4IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_AC4IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_AC4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C4IRSfs_Ctx(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16s_C4IRSfs(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16s_C4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C1IRSfs_Ctx(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C1IRSfs(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C3IRSfs_Ctx(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_C3IRSfs(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                                Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc aConstants[3], 
                            Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_AC4IRSfs_Ctx(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16sc_AC4IRSfs(const Mpp16sc aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstant, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C1IRSfs_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C1IRSfs(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32s_C1IRSfs_Ctx(const Mpp32s * pConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstants, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C3IRSfs_Ctx(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32s_C3IRSfs(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32s_C3IRSfs_Ctx(const Mpp32s * pConstants, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C1IRSfs_Ctx(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C1IRSfs(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C3IRSfs_Ctx(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_C3IRSfs(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                            Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiply by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc aConstants[3], 
                            Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_AC4IRSfs_Ctx(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiply by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32sc_AC4IRSfs(const Mpp32sc aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant 32-bit floating point host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant 32-bit floating point host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant 32-bit floating point device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image multiply by constant.
 * \param nConstant 32-bit floating point host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C1IR_Ctx(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image multiply by constant.
 * \param nConstant 32-bit floating point host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C1IR(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image multiply by constant.
 * \param pConstant 32-bit floating point device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C1IR_Ctx(const Mpp32f * pConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C3IR(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image multiply by constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C3IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_16f_C4IR(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image multiply by constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_16f_C4IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image multiply by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C1IR_Ctx(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image multiply by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C1IR(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image multiply by constant.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C1IR_Ctx(const Mpp32f * pConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C3IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image multiply by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C3IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f  aConstants[3], 
                            Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f  aConstants[3], 
                        Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                  Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);


/** 
 * Four 32-bit floating point channel with unmodified alpha in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_AC4IR_Ctx(const Mpp32f  aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_AC4IR(const Mpp32f  aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image multiply by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_AC4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f  aConstants[4], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f  aConstants[4], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);


/** 
 * Four 32-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image multiply by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32f_C4IR(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image multiply by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceC_32f_C4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C1IR_Ctx(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C1IR(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C3IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C3IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                             Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                         Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_AC4IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_AC4IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image multiply by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C4IR_Ctx(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image multiply by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulC_32fc_C4IR(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_mulc */ 

/** 
 * \section image_mulcscale MulCScale
 * @defgroup image_mulcscale MulCScale
 *
 * Multiplies each pixel of an image by a constant value then scales the result
 * by the maximum value for the data bit width. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                               Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstant, 
                                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C1IR_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C1IR(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C1IR_Ctx(const Mpp8u * pConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                               Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C3IR_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C3IR(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image multiply by constant and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C3IR_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  * pConstants, 
                                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_AC4IR_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_AC4IR(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiply by constant, scale and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_AC4IR_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                               Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C4IR_Ctx(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_8u_C4IR(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image multiply by constant and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_8u_C4IR_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                                Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                            Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstant, 
                                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C1IR_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C1IR(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C1IR_Ctx(const Mpp16u * pConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                                Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                            Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C3IR_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C3IR(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C3IR_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);


/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_AC4IR_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_AC4IR(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiply by constant and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_AC4IR_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                                Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                            Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image multiply by constant and scale by max bit width value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C4IR_Ctx(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulCScale_16u_C4IR(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image multiply by constant and scale by max bit width value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulDeviceCScale_16u_C4IR_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** @} image_mulcscale */ 

/** 
 * \section image_subc SubC
 * @defgroup image_subc SubC
 * Subtracts a constant value from each pixel of an image. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstant, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C1IRSfs_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C1IRSfs(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C1IRSfs_Ctx(const Mpp8u * pConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C3IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C3IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C3IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_AC4IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_AC4IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_AC4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C4IRSfs_Ctx(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_8u_C4IRSfs(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_8u_C4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstant, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C1IRSfs_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C1IRSfs(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C1IRSfs_Ctx(const Mpp16u * pConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C3IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C3IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C3IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_AC4IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_AC4IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_AC4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C4IRSfs_Ctx(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16u_C4IRSfs(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16u_C4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstant, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C1IRSfs_Ctx(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C1IRSfs(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C1IRSfs_Ctx(const Mpp16s * pConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C3IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C3IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C3IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                           Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                     Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_AC4IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_AC4IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_AC4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C4IRSfs_Ctx(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16s_C4IRSfs(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16s_C4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C1IRSfs_Ctx(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C1IRSfs(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C3IRSfs_Ctx(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_C3IRSfs(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                                Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                            Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_AC4IRSfs_Ctx(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16sc_AC4IRSfs(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstant, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C1IRSfs_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C1IRSfs(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32s_C1IRSfs_Ctx(const Mpp32s * pConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstants, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C3IRSfs_Ctx(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32s_C3IRSfs(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image subtract constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32s_C3IRSfs_Ctx(const Mpp32s * pConstants, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C1IRSfs_Ctx(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C1IRSfs(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C3IRSfs_Ctx(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_C3IRSfs(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                                Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtract constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                            Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_AC4IRSfs_Ctx(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtract constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32sc_AC4IRSfs(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image subtract constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C1IR_Ctx(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image subtract constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C1IR(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image subtract constant.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C1IR_Ctx(const Mpp32f * pConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
 
/** 
 * Three 16-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C3IR(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image subtract constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C3IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
  
/** 
 * Four 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);
  
/** 
 * Four 16-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_16f_C4IR(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image subtract constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_16f_C4IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image subtract constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C1IR_Ctx(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image subtract constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C1IR(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image subtract constant.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C1IR_Ctx(const Mpp32f * pConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C3IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image subtract constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C3IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                            Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                        Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                  Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_AC4IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_AC4IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image subtract constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_AC4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32f_C4IR(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image subtract constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubDeviceC_32f_C4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C1IR_Ctx(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C1IR(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C3IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C3IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                             Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                         Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_AC4IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image subtract constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_AC4IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image subtract constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C4IR_Ctx(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image subtract constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSubC_32fc_C4IR(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_subc */ 

/** 
 * \section image_divc DivC
 * @defgroup image_divc DivC
 *
 * Divides each pixel of an image by a constant value. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstant, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C1IRSfs_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C1IRSfs(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C1IRSfs_Ctx(const Mpp8u * pConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C3IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C3IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel 8-bit unsigned char in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C3IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_AC4IRSfs_Ctx(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_AC4IRSfs(const Mpp8u aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_AC4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pConstants, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C4IRSfs_Ctx(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_8u_C4IRSfs(const Mpp8u aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_8u_C4IRSfs_Ctx(const Mpp8u * pConstants, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstant, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C1IRSfs_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C1IRSfs(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C1IRSfs_Ctx(const Mpp16u * pConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C3IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C3IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C3IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);


/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_AC4IRSfs_Ctx(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_AC4IRSfs(const Mpp16u aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_AC4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pConstants, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C4IRSfs_Ctx(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16u_C4IRSfs(const Mpp16u aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16u_C4IRSfs_Ctx(const Mpp16u * pConstants, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s nConstant, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstant, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C1IRSfs_Ctx(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C1IRSfs(const Mpp16s nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C1IRSfs_Ctx(const Mpp16s * pConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C3IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C3IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C3IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[3], 
                           Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                     Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_AC4IRSfs_Ctx(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_AC4IRSfs(const Mpp16s aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_AC4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s aConstants[4], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pConstants, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C4IRSfs_Ctx(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16s_C4IRSfs(const Mpp16s aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16s_C4IRSfs_Ctx(const Mpp16s * pConstants, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc nConstant, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C1IRSfs_Ctx(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C1IRSfs(const Mpp16sc nConstant, Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C3IRSfs_Ctx(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_C3IRSfs(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                                Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc  aConstants[3], 
                            Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_AC4IRSfs_Ctx(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16sc_AC4IRSfs(const Mpp16sc  aConstants[3], Mpp16sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstant, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C1IRSfs_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C1IRSfs(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32s_C1IRSfs_Ctx(const Mpp32s * pConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pConstants, 
                                    Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C3IRSfs_Ctx(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32s_C3IRSfs(const Mpp32s aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image divided by constant, scale, then clamp to saturated value.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32s_C3IRSfs_Ctx(const Mpp32s * pConstants, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc nConstant, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C1IRSfs_Ctx(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C1IRSfs(const Mpp32sc nConstant, Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C3IRSfs_Ctx(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_C3IRSfs(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                                Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha image divided by constant, scale, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc  aConstants[3], 
                            Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_AC4IRSfs_Ctx(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed complex integer (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image divided by constant, scale, then clamp to saturated value.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32sc_AC4IRSfs(const Mpp32sc  aConstants[3], Mpp32sc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image divided by constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C1IR_Ctx(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image divided by constant.
 * \param nConstant host memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C1IR(const Mpp32f nConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image divided by constant.
 * \param pConstant device memory 32-bit floating point constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C1IR_Ctx(const Mpp32f * pConstant, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C3IR(const Mpp32f aConstants[3], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image divided by constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C3IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_16f_C4IR(const Mpp32f aConstants[4], Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image divided by constant.
 * \param pConstants fixed size device memory array of 32-bit floating point constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_16f_C4IR_Ctx(const Mpp32f * pConstants, Mpp16f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f nConstant, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstant, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image divided by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C1IR_Ctx(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image divided by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C1IR(const Mpp32f nConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image divided by constant.
 * \param pConstant device memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C1IR_Ctx(const Mpp32f * pConstant, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C3IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C3IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image divided by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C3IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                            Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[3], 
                        Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                  Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_AC4IR_Ctx(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_AC4IR(const Mpp32f aConstants[3], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image divided by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_AC4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f aConstants[4], 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pConstants, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C4IR_Ctx(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image divided by constant.
 * \param aConstants fixed size host memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32f_C4IR(const Mpp32f aConstants[4], Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image divided by constant.
 * \param pConstants fixed size device memory array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivDeviceC_32f_C4IR_Ctx(const Mpp32f * pConstants, Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc nConstant, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C1IR_Ctx(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param nConstant host memory constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C1IR(const Mpp32fc nConstant, Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C3IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C3IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                             Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[3], 
                         Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_AC4IR_Ctx(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel with unmodified alpha in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_AC4IR(const Mpp32fc  aConstants[3], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel image divided by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc  aConstants[4], 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C4IR_Ctx(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit complex floating point (32-bit floating point real, 32-bit floating point imaginary) channel in place image divided by constant.
 * \param aConstants fixed size array of host memory constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDivC_32fc_C4IR(const Mpp32fc  aConstants[4], Mpp32fc * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_divc */ 

/** 
 * \section image_absdiffc AbsDiffC
 * @defgroup image_absdiffc AbsDiffC
 *
 * Determines absolute difference between each pixel of an image and a constant value. 
 *  
 * Note: If you use one of the device constant versions of these functions and the function called immediately preceeding that 
 * function generates that device constant you MUST either call macaStreamSynchronize() or macaDeviceSynchronize() before calling 
 * the device constant function. 
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, Mpp8u nConstant, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, Mpp8u nConstant);

/** 
 * One 8-bit unsigned char channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffDeviceC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, Mpp8u * pConstant, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u * pDst, int nDstStep,  MppiSize oSizeROI, Mpp16u nConstant, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u * pDst, int nDstStep,  MppiSize oSizeROI, Mpp16u nConstant);

/** 
 * One 16-bit unsigned short channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffDeviceC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u * pDst, int nDstStep,  MppiSize oSizeROI, Mpp16u * pConstant, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, Mpp32f * pDst, int nDstStep, MppiSize oSizeROI, Mpp32f nConstant, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant host memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, Mpp32f * pDst, int nDstStep, MppiSize oSizeROI, Mpp32f nConstant);

/** 
 * One 32-bit floating point channel image absolute difference with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pConstant device memory constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiffDeviceC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, Mpp32f * pDst, int nDstStep, MppiSize oSizeROI, Mpp32f * pConstant, MppStreamContext mppStreamCtx);

/** @} image_absdiffc */ 

/** 
 * \section image_add Add
 * @defgroup image_add Add
 *
 * Pixel by pixel addition of two images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C1IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C1IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C3IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C3IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_AC4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                              Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_AC4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_8u_C4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C1IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C1IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C3IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C3IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_AC4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                               Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_AC4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16u_C4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C1IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C1IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C3IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C3IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_AC4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                               Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_AC4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                           Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16s_C4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C1IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C1IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C3IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_C3IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_AC4IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                                Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16sc_AC4IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                            Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image add.
 * Add the pixel values of corresponding pixels in the ROI and write them to the output image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiAdd_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, 
                              const Mpp32s * pSrc2, int nSrc2Step, 
                                    Mpp32s * pDst,  int nDstStep, 
                                    MppiSize oSizeROI, MppStreamContext mppStreamCtx);                        

/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image add.
 * Add the pixel values of corresponding pixels in the ROI and write them to the output image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiAdd_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, 
                          const Mpp32s * pSrc2, int nSrc2Step, 
                                Mpp32s * pDst,  int nDstStep, 
                                MppiSize oSizeROI);                        

/** 
 * One 32-bit signed integer channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C1IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C1IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C3IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32s_C3IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C1IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C1IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C3IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_C3IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_AC4IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                                Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image addition, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32sc_AC4IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                            Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C1IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C1IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C3IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C3IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C4IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_16f_C4IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C3IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C3IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_AC4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                            Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_AC4IR(const Mpp32f * pSrc,     int nSrcStep, 
                        Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32f_C4IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C1IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C1IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C3IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C3IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_AC4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                             Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_AC4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                         Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image addition.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image addition.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAdd_32fc_C4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_add */ 

/** 
 * \section image_addsquare AddSquare
 * @defgroup image_addsquare AddSquare
 *
 * Pixel by pixel addition of squared pixels from source image to floating point
 * pixel values of destination image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_8u32f_C1IMR_Ctx(const Mpp8u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                    Mpp32f * pSrcDst, int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_8u32f_C1IMR(const Mpp8u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                Mpp32f * pSrcDst, int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_8u32f_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                   Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_8u32f_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_16u32f_C1IMR_Ctx(const Mpp16u * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                                     Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_16u32f_C1IMR(const Mpp16u * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                                 Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_16u32f_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                    Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_16u32f_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_32f_C1IMR_Ctx(const Mpp32f * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                                  Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image squared then added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_32f_C1IMR(const Mpp32f * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                              Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                                 Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image squared then added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddSquare_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                             Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_addsquare */ 

/** 
 * \section image_addproduct AddProduct
 * @defgroup image_addproduct AddProduct
 * Pixel by pixel addition of product of pixels from two source images to
 * floating point pixel values of destination image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_8u32f_C1IMR_Ctx(const Mpp8u * pSrc1,  int nSrc1Step,    const Mpp8u * pSrc2, int nSrc2Step,
                               const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,    int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_8u32f_C1IMR(const Mpp8u * pSrc1,  int nSrc1Step,    const Mpp8u * pSrc2, int nSrc2Step,
                           const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,    int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_8u32f_C1IR_Ctx(const Mpp8u * pSrc1,    int nSrc1Step,   const Mpp8u * pSrc2, int nSrc2Step,
                                    Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_8u32f_C1IR(const Mpp8u * pSrc1,    int nSrc1Step,   const Mpp8u * pSrc2, int nSrc2Step,
                                Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16u32f_C1IMR_Ctx(const Mpp16u * pSrc1, int nSrc1Step,    const Mpp16u * pSrc2, int nSrc2Step,
                                const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,     int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16u32f_C1IMR(const Mpp16u * pSrc1, int nSrc1Step,    const Mpp16u * pSrc2, int nSrc2Step,
                            const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,     int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16u32f_C1IR_Ctx(const Mpp16u * pSrc1,    int nSrc1Step,   const Mpp16u * pSrc2, int nSrc2Step,
                                     Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16u32f_C1IR(const Mpp16u * pSrc1,    int nSrc1Step,   const Mpp16u * pSrc2, int nSrc2Step,
                                 Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_32f_C1IMR_Ctx(const Mpp32f * pSrc1, int nSrc1Step,    const Mpp32f * pSrc2, int nSrc2Step,
                             const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,     int nSrcDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image product added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_32f_C1IMR(const Mpp32f * pSrc1, int nSrc1Step,    const Mpp32f * pSrc2, int nSrc2Step,
                         const Mpp8u  * pMask, int nMaskStep,    Mpp32f * pSrcDst,     int nSrcDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_32f_C1IR_Ctx(const Mpp32f * pSrc1,    int nSrc1Step,   const Mpp32f * pSrc2, int nSrc2Step,
                                  Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_32f_C1IR(const Mpp32f * pSrc1,    int nSrc1Step,   const Mpp32f * pSrc2, int nSrc2Step,
                              Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16f_C1IR_Ctx(const Mpp16f * pSrc1,    int nSrc1Step,   const Mpp16f * pSrc2, int nSrc2Step,
                                  Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image product added to in place floating point destination image.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddProduct_16f_C1IR(const Mpp16f * pSrc1,    int nSrc1Step,   const Mpp16f * pSrc2, int nSrc2Step,
                              Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_addproduct */ 

/** 
 * \section image_addweighted AddWeighted
 * @defgroup image_addweighted AddWeighted
 * Pixel by pixel addition of alpha weighted pixel values from a source image to
 * floating point pixel values of destination image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_8u32f_C1IMR_Ctx(const Mpp8u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                      Mpp32f * pSrcDst, int nSrcDstStep,  MppiSize oSizeROI,   Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_8u32f_C1IMR(const Mpp8u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                  Mpp32f * pSrcDst, int nSrcDstStep,  MppiSize oSizeROI,   Mpp32f nAlpha);

/** 
 * One 8-bit unsigned char channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_8u32f_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                     Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_8u32f_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                                 Mpp32f * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha);

/** 
 * One 16-bit unsigned short channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_16u32f_C1IMR_Ctx(const Mpp16u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                       Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI,   Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_16u32f_C1IMR(const Mpp16u * pSrc,     int nSrcStep,     const Mpp8u * pMask, int nMaskStep, 
                                   Mpp32f * pSrcDst,  int nSrcDstStep,  MppiSize oSizeROI,   Mpp32f nAlpha);

/** 
 * One 16-bit unsigned short channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_16u32f_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                      Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_16u32f_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                                  Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha);

/** 
 * One 32-bit floating point channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_32f_C1IMR_Ctx(const Mpp32f * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                                    Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel alpha weighted image added to in place floating point destination image using filter mask (updates destination when mask is non-zero).
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pMask \ref mask_image_pointer.
 * \param nMaskStep \ref mask_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_32f_C1IMR(const Mpp32f * pSrc,     int nSrcStep, const Mpp8u * pMask, int nMaskStep, 
                                Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha);

/** 
 * One 32-bit floating point channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                                   Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel alpha weighted image added to in place floating point destination image.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nAlpha Alpha weight to be applied to source image pixels (0.0F to 1.0F)
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAddWeighted_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                               Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, Mpp32f nAlpha);

/** @} image_addweighted */ 

/** 
 * \section image_mul Mul
 * @defgroup image_mul Mul
 *
 * Pixel by pixel multiply of two images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C1IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C1IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C3IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C3IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_AC4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                              Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_AC4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_8u_C4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C1IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C1IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C3IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C3IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_AC4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                               Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_AC4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16u_C4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C1IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C1IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C3IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C3IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_AC4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                               Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_AC4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                           Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16s_C4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C1IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C1IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C3IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_C3IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_AC4IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                                Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16sc_AC4IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                            Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead.
 * 1 channel 32-bit image multiplication.
 * Multiply corresponding pixels in ROI. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiMul_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, 
                              const Mpp32s * pSrc2, int nSrc2Step, 
                                    Mpp32s * pDst,  int nDstStep, 
                                    MppiSize oSizeROI, MppStreamContext mppStreamCtx); 

/** 
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead.
 * 1 channel 32-bit image multiplication.
 * Multiply corresponding pixels in ROI. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiMul_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, 
                          const Mpp32s * pSrc2, int nSrc2Step, 
                                Mpp32s * pDst,  int nDstStep, 
                                MppiSize oSizeROI); 

/** 
 * One 32-bit signed integer channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C1IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C1IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C3IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32s_C3IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C1IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C1IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C3IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_C3IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_AC4IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                                Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiplication, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32sc_AC4IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                            Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C1IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C1IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C3IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C3IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C4IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_16f_C4IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C3IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C3IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_AC4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                            Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_AC4IR(const Mpp32f * pSrc,     int nSrcStep, 
                        Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32f_C4IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C1IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C1IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C3IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C3IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_AC4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                             Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_AC4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                         Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image multiplication.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image multiplication.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMul_32fc_C4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_mul */ 

/** 
 * \section image_mulscale MulScale
 * @defgroup image_mulscale MulScale
 *
 * Pixel by pixel multiplies each pixel of two images then scales the result by
 * the maximum value for the data bit width.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                           Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C3IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C3IR(const Mpp8u * pSrc,     int nSrcStep, 
                           Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                               Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_AC4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_AC4IR(const Mpp8u * pSrc,     int nSrcStep, 
                            Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_8u_C4IR(const Mpp8u * pSrc,     int nSrcStep, 
                           Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus 
mppiMulScale_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                            Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C3IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C3IR(const Mpp16u * pSrc,     int nSrcStep, 
                            Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                            Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_AC4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                 Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_AC4IR(const Mpp16u * pSrc,     int nSrcStep, 
                             Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image multiplication then scale by maximum value for pixel bit width.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiMulScale_16u_C4IR(const Mpp16u * pSrc,     int nSrcStep, 
                            Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_mulscale */ 

/** 
 * \section image_sub Sub
 * @defgroup image_sub Sub
 *
 * Pixel by pixel subtraction of two images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C1IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C1IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C3IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C3IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus 
mppiSub_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_AC4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                              Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_AC4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_8u_C4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C1IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C1IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C3IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C3IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_AC4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                               Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_AC4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16u_C4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C1IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C1IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C3IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C3IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_AC4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                               Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_AC4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                           Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16s_C4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C1IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C1IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C3IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_C3IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_AC4IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                                Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16sc_AC4IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                            Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image subtraction.
 * Subtract pSrc1's pixels from corresponding pixels in pSrc2. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiSub_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, 
                              const Mpp32s * pSrc2, int nSrc2Step, 
                                    Mpp32s * pDst,  int nDstStep, 
                                    MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image subtraction.
 * Subtract pSrc1's pixels from corresponding pixels in pSrc2. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiSub_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, 
                          const Mpp32s * pSrc2, int nSrc2Step, 
                                Mpp32s * pDst,  int nDstStep, 
                                MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C1IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C1IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C3IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C3IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C4RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C4RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C4IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32s_C4IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C1IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C1IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C3IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_C3IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_AC4IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                                Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtraction, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32sc_AC4IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                            Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C1IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C1IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C3IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C3IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C4IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_16f_C4IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C3IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C3IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_AC4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                            Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit floating point channel with unmodified alpha in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_AC4IR(const Mpp32f * pSrc,     int nSrcStep, 
                        Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit floating point channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32f_C4IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C1IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C1IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C3IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C3IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_AC4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                             Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_AC4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                         Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image subtraction.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image subtraction.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSub_32fc_C4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_sub */ 

/** 
 * \section image_div Div
 * @defgroup image_div Div
 *
 * Pixel by pixel division of two images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C1IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C1IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C3IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C3IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_AC4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                              Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_AC4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                             Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_8u_C4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C1IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C1IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C3IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C3IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_AC4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                               Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_AC4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                              Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16u_C4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C1IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C1IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C3IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C3IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_AC4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                               Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_AC4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                           Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                         Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                              Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16s_C4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                          Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C1RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C1RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C1IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C1IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C3RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                              Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus 
mppiDiv_16sc_C3RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                          Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C3IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                               Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_C3IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                           Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_AC4RSfs_Ctx(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                               Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_AC4RSfs(const Mpp16sc * pSrc1, int nSrc1Step, const Mpp16sc * pSrc2, int nSrc2Step, 
                           Mpp16sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_AC4IRSfs_Ctx(const Mpp16sc * pSrc,     int nSrcStep, 
                                Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short complex number (16-bit real, 16-bit imaginary) channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16sc_AC4IRSfs(const Mpp16sc * pSrc,     int nSrcStep, 
                            Mpp16sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C1RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C1RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image division.
 * Divide pixels in pSrc2 by pSrc1's pixels. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus mppiDiv_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, 
                              const Mpp32s * pSrc2, int nSrc2Step, 
                                    Mpp32s * pDst,  int nDstStep, 
                                    MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/**
 * Note: This function is to be deprecated in future MPP releases, use the function above with a scale factor of 0 instead. 
 * 32-bit image division.
 * Divide pixels in pSrc2 by pSrc1's pixels. 
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus mppiDiv_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, 
                          const Mpp32s * pSrc2, int nSrc2Step, 
                                Mpp32s * pDst,  int nDstStep, 
                                MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C1IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C1IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C3RSfs_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C3RSfs(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C3IRSfs_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                              Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32s_C3IRSfs(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C1RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C1RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C1IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C1IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C3RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                              Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C3RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                          Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C3IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                               Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_C3IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                           Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_AC4RSfs_Ctx(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                               Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_AC4RSfs(const Mpp32sc * pSrc1, int nSrc1Step, const Mpp32sc * pSrc2, int nSrc2Step, 
                           Mpp32sc * pDst,  int nDstStep,  MppiSize oSizeROI,   int nScaleFactor);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_AC4IRSfs_Ctx(const Mpp32sc * pSrc,     int nSrcStep, 
                                Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32sc_AC4IRSfs(const Mpp32sc * pSrc,     int nSrcStep, 
                            Mpp32sc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C1IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C1IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C3R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C3R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C3IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C3IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C4R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                          Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C4R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, 
                      Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C4IR_Ctx(const Mpp16f * pSrc,     int nSrcStep, 
                           Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_16f_C4IR(const Mpp16f * pSrc,     int nSrcStep, 
                       Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C1IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C1IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C3R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C3R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C3IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C3IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                           Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                       Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_AC4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                            Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel with unmodified alpha in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_AC4IR(const Mpp32f * pSrc,     int nSrcStep, 
                        Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                          Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                      Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C4IR_Ctx(const Mpp32f * pSrc,     int nSrcStep, 
                           Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32f_C4IR(const Mpp32f * pSrc,     int nSrcStep, 
                       Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C1R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C1R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C1IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C1IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C3R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C3R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C3IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C3IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_AC4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                            Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_AC4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                        Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_AC4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                             Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel with unmodified alpha in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_AC4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                         Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C4R_Ctx(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                           Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel image division.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C4R(const Mpp32fc * pSrc1, int nSrc1Step, const Mpp32fc * pSrc2, int nSrc2Step, 
                       Mpp32fc * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C4IR_Ctx(const Mpp32fc * pSrc,     int nSrcStep, 
                            Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point complex number (32-bit real, 32-bit imaginary) channel in place image division.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_32fc_C4IR(const Mpp32fc * pSrc,     int nSrcStep, 
                        Mpp32fc * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_div */ 

/** 
 * \section image_divround Div_Round
 * @defgroup image_divround Div_Round
 *
 * Pixel by pixel division of two images using result rounding modes.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C1RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                  Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C1RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C1IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                   Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C1IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C3RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                  Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C3RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C3IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                   Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);
                               
/** 
 * Three 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C3IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);
                               
/** 
 * Four 8-bit unsigned char channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_AC4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                   Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);


/** 
 * Four 8-bit unsigned char channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_AC4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                               Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_AC4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                    Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_AC4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                                Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C4RSfs_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                  Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C4RSfs(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C4IRSfs_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                                   Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_8u_C4IRSfs(const Mpp8u * pSrc,     int nSrcStep, 
                               Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C1RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                   Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C1RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C1IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                    Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C1IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C3RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                   Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C3RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C3IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                    Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);
                               
/** 
 * Three 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C3IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);
                               
/** 
 * Four 16-bit unsigned short channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_AC4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                    Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_AC4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_AC4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                     Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_AC4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                                 Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C4RSfs_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                   Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C4RSfs(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C4IRSfs_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                                    Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16u_C4IRSfs(const Mpp16u * pSrc,     int nSrcStep, 
                                Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * One 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C1RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                   Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C1RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppRoundMode rndMode, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C1IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                                    Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C1IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                                Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C3RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                   Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C3RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C3IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                                    Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);
                               
/** 
 * Three 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C3IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                                Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);
                               
/** 
 * Four 16-bit signed short channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_AC4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                    Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL)
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_AC4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_AC4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                                     Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image division with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_AC4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                                 Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C4RSfs_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                   Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C4RSfs(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,    MppRoundMode rndMode, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C4IRSfs_Ctx(const Mpp16s * pSrc,     int nSrcStep, 
                                    Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image division, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param rndMode Result Rounding mode to be used (MPP_RND_ZERO, MPP_RND_NEAR, or NP_RND_FINANCIAL).
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiDiv_Round_16s_C4IRSfs(const Mpp16s * pSrc,     int nSrcStep, 
                                Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppRoundMode rndMode, int nScaleFactor);

/** @} image_divround */ 

/** 
 * \section image_abs Abs
 * @defgroup image_abs Abs
 *
 * Absolute value of each pixel value in an image.
 *
 * @{
 */

/** 
 * One 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C1R_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C1R(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C1IR_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C1IR(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C3R_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C3R(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C3IR_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C3IR(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel image absolute value with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_AC4R_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image absolute value with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_AC4R(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel in place image absolute value with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_AC4IR_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image absolute value with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_AC4IR(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C4R_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C4R(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C4IR_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16s_C4IR(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C1R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C1R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C1IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C1IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C3R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C3R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C3IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C3IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C4R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C4R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C4IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_16f_C4IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C1R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C1R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C1IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C1IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C3R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C3R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C3IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C3IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image absolute value with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_AC4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image absolute value with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_AC4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image absolute value with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_AC4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image absolute value with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_AC4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image absolute value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image absolute value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbs_32f_C4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_abs */ 

/** 
 * \section image_absdiff AbsDiff
 * @defgroup image_absdiff AbsDiff
 *
 * Pixel by pixel absolute difference between two images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channels absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channels absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channels absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channels absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_16f_C1R_Ctx(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_16f_C1R(const Mpp16f * pSrc1, int nSrc1Step, const Mpp16f * pSrc2, int nSrc2Step, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel absolute difference of image1 minus image2.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAbsDiff_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** @} image_absdiff */ 

/** 
 * \section image_sqr Sqr
 * @defgroup image_sqr Sqr
 *
 * Square each pixel in an image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C1RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C1RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C1IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C1IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C3RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C3RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C3IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C3IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_AC4RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_AC4RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_AC4IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_AC4IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C4RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C4RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C4IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_8u_C4IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C1RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C1RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C1IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C1IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C3RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C3RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C3IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C3IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_AC4RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_AC4RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_AC4IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_AC4IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C4RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C4RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C4IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16u_C4IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C1RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C1RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C1IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C1IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C3RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C3RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C3IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C3IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_AC4RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_AC4RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_AC4IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image squared with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_AC4IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C4RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C4RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C4IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image squared, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16s_C4IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C1R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C1R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C1IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C1IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C3R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C3R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C3IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C3IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C4R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C4R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C4IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_16f_C4IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C1R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C1R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C1IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C1IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C3R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C3R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C3IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C3IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image squared with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_AC4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image squared with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_AC4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image squared with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_AC4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image squared with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_AC4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image squared.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image squared.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqr_32f_C4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_sqr */ 

/** 
 * \section image_sqrt Sqrt
 * @defgroup image_sqrt Sqrt
 *
 * Pixel by pixel square root of each pixel in an image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C1RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C1RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C1IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C1IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C3RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C3RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C3IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_C3IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_AC4RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_AC4RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 8-bit unsigned char channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_AC4IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_8u_AC4IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C1RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C1RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C1IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C1IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C3RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C3RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C3IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_C3IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_AC4RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_AC4RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit unsigned short channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_AC4IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16u_AC4IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C1RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C1RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C1IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C1IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C3RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C3RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C3IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image square root, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_C3IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification. 
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_AC4RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification. 
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_AC4RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Four 16-bit signed short channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_AC4IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image square root with unmodified alpha, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16s_AC4IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C1R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C1R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C1IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C1IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C3R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C3R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C3IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C3IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C4R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C4R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C4IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_16f_C4IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C1R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C1R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C1IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C1IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C3R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C3R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C3IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C3IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image square root with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_AC4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image square root with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_AC4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image square root with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_AC4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image square root with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_AC4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C4R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image square root.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C4R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C4IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel in place image square root.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiSqrt_32f_C4IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_sqrt */ 

/** 
 * \section image_ln Ln
 * @defgroup image_ln Ln
 *
 * Pixel by pixel natural logarithm of each pixel in an image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C1RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C1RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C1IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C1IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C3RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C3RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C3IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_8u_C3IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C1RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C1RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C1IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C1IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C3RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C3RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C3IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16u_C3IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C1RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C1RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C1IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C1IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C3RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C3RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C3IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image natural logarithm, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16s_C3IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C1R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C1R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C1IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C1IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C3R_Ctx(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C3R(const Mpp16f * pSrc, int nSrcStep, Mpp16f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C3IR_Ctx(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_16f_C3IR(Mpp16f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C1R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C1R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C1IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C1IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C3R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image natural logarithm.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C3R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C3IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image natural logarithm.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLn_32f_C3IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_ln */ 

/** 
 * \section image_exp Exp
 * @defgroup image_exp Exp
 *
 * Exponential value of each pixel in an image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C1RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C1RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 8-bit unsigned char channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C1IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C1IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C3RSfs_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C3RSfs(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 8-bit unsigned char channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C3IRSfs_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_8u_C3IRSfs(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C1RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C1RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit unsigned short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C1IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C1IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C3RSfs_Ctx(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C3RSfs(const Mpp16u * pSrc, int nSrcStep, Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit unsigned short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C3IRSfs_Ctx(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16u_C3IRSfs(Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C1RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C1RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 16-bit signed short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C1IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C1IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C3RSfs_Ctx(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C3RSfs(const Mpp16s * pSrc, int nSrcStep, Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, int nScaleFactor);

/** 
 * Three 16-bit signed short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C3IRSfs_Ctx(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image exponential, scale by \f$2^(-nScaleFactor)\f$, then clamp to saturated value.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param nScaleFactor \ref integer_result_scaling.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_16s_C3IRSfs(Mpp16s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, int nScaleFactor);

/** 
 * One 32-bit floating point channel image exponential.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C1R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image exponential.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C1R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit floating point channel in place image exponential.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C1IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel in place image exponential.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C1IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel image exponential.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C3R_Ctx(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel image exponential.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C3R(const Mpp32f * pSrc, int nSrcStep, Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit floating point channel in place image exponential.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C3IR_Ctx(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit floating point channel in place image exponential.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiExp_32f_C3IR(Mpp32f * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_exp */ 

/** @} image_arithmetic_operations */ 

/** 
 * \section image_logical_operations Logical Operations
 * @defgroup image_logical_operations Logical Operations
 * The set of image processing logical operations available in the library.
 * @{  
 */ 

/** 
 * \section image_andc AndC
 * @defgroup image_andc AndC
 *
 * Pixel by pixel logical and of an image with a constant.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C1IR_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C1IR(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C3IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C3IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                       Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_AC4IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_AC4IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C4IR_Ctx(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_8u_C4IR(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C1IR_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C1IR(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C3IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C3IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                        Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                        Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_AC4IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_AC4IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C4IR_Ctx(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_16u_C4IR(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C1IR_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image logical and with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C1IR(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C3IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C3IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                            Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical and with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                        Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_AC4IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical and with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_AC4IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical and with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C4IR_Ctx(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical and with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAndC_32s_C4IR(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_andc */ 


/** 
 * \section image_orc OrC
 * @defgroup image_orc OrC
 *
 * Pixel by pixel logical or of an image with a constant.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C1IR_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C1IR(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C3IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C3IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_AC4IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_AC4IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C4IR_Ctx(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_8u_C4IR(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C1IR_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C1IR(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C3IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C3IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_AC4IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_AC4IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C4IR_Ctx(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_16u_C4IR(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C1IR_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image logical or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C1IR(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C3IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C3IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_AC4IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_AC4IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C4IR_Ctx(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOrC_32s_C4IR(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_orc */ 

/** 
 * \section image_xorc XorC
 * @defgroup image_xorc XorC
 *
 * Pixel by pixel logical exclusive or of an image with a constant.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u nConstant, 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C1IR_Ctx(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C1IR(const Mpp8u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C3IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C3IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                           Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[3], 
                       Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_AC4IR_Ctx(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_AC4IR(const Mpp8u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u  aConstants[4], 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C4IR_Ctx(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_8u_C4IR(const Mpp8u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u nConstant, 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C1IR_Ctx(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C1IR(const Mpp16u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C3IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C3IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                            Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[3], 
                        Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_AC4IR_Ctx(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_AC4IR(const Mpp16u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u  aConstants[4], 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C4IR_Ctx(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_16u_C4IR(const Mpp16u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s nConstant, 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C1IR_Ctx(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C1IR(const Mpp32s nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C3IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C3IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                            Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical exclusive or with constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[3], 
                        Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_AC4IR_Ctx(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_AC4IR(const Mpp32s  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image logical exclusive or with constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s  aConstants[4], 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXorC_32s_C4IR_Ctx(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */MppStatus 
mppiXorC_32s_C4IR(const Mpp32s  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_xorc */ 

/** 
 * \section image_rshiftc RShiftC
 * @defgroup image_rshiftc RShiftC
 *
 * Pixel by pixel right shift of an image by a constant value.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C1IR_Ctx(const Mpp32u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C1IR(const Mpp32u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C3IR(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_AC4IR(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8u_C4IR(const Mpp32u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C1R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                             Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C1R(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                         Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit signed char channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C1IR_Ctx(const Mpp32u nConstant, Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit signed char channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C1IR(const Mpp32u nConstant, Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C3R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                             Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C3R(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                         Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit signed char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit signed char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C3IR(const Mpp32u  aConstants[3], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit signed char channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_AC4R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit signed char channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_AC4R(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit signed char channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit signed char channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_AC4IR(const Mpp32u  aConstants[3], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C4R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                             Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit signed char channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C4R(const Mpp8s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                         Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit signed char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit signed char channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_8s_C4IR(const Mpp32u  aConstants[4], Mpp8s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C1IR_Ctx(const Mpp32u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C1IR(const Mpp32u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C3IR(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_AC4IR(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16u_C4IR(const Mpp32u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C1R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C1R(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit signed short channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C1IR_Ctx(const Mpp32u nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C1IR(const Mpp32u nConstant, Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C3R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C3R(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit signed short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit signed short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C3IR(const Mpp32u  aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_AC4R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                               Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_AC4R(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                           Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_AC4IR(const Mpp32u  aConstants[3], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C4R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                              Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C4R(const Mpp16s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                          Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit signed short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit signed short channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_16s_C4IR(const Mpp32u  aConstants[4], Mpp16s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C1IR_Ctx(const Mpp32u nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image right shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C1IR(const Mpp32u nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C3IR(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                               Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image right shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image right shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_AC4IR(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image right shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image right shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiRShiftC_32s_C4IR(const Mpp32u  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_rshiftc */ 

/** 
 * \section image_lshiftc LShiftC
 * @defgroup image_lshiftc LShiftC
 *
 * Pixel by pixel left shift of an image by a constant value.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C1IR_Ctx(const Mpp32u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C1IR(const Mpp32u nConstant, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C3IR(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_AC4IR(const Mpp32u  aConstants[3], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_8u_C4IR(const Mpp32u  aConstants[4], Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C1IR_Ctx(const Mpp32u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C1IR(const Mpp32u nConstant, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C3IR(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                               Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_AC4IR(const Mpp32u  aConstants[3], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_16u_C4IR(const Mpp32u  aConstants[4], Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nConstant Constant.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u nConstant, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * One 32-bit signed integer channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C1IR_Ctx(const Mpp32u nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel in place image left shift by constant.
 * \param nConstant Constant.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C1IR(const Mpp32u nConstant, Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C3IR_Ctx(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 32-bit signed integer channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C3IR(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                               Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image left shift by constant with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[3], 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_AC4IR_Ctx(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image left shift by constant with unmodified alpha.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_AC4IR(const Mpp32u  aConstants[3], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                              Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image left shift by constant.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32u  aConstants[4], 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C4IR_Ctx(const Mpp32u  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel in place image left shift by constant.
 * \param aConstants fixed size array of constant values, one per channel.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiLShiftC_32s_C4IR(const Mpp32u  aConstants[4], Mpp32s * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_lshiftc */ 

/** 
 * \section image_and And
 * @defgroup image_and And
 *
 * Pixel by pixel logical and of images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C3IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C3IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_AC4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                           Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_AC4IR(const Mpp8u * pSrc,     int nSrcStep, 
                       Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_8u_C4IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C3IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C3IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_AC4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                            Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_AC4IR(const Mpp16u * pSrc,     int nSrcStep, 
                        Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_16u_C4IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C1IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C1IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C3IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C3IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical and with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_AC4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                            Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical and with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_AC4IR(const Mpp32s * pSrc,     int nSrcStep, 
                        Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical and.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical and.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAnd_32s_C4IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_and */ 

/** 
 * \section image_or Or
 * @defgroup image_or Or
 *
 * Pixel by pixel logical or of images.
 *
 * @{
 */
 
/** 
 * One 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                     Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C3IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C3IR(const Mpp8u * pSrc,     int nSrcStep, 
                     Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_AC4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_AC4IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                        Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                    Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                         Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_8u_C4IR(const Mpp8u * pSrc,     int nSrcStep, 
                     Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                      Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C3IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C3IR(const Mpp16u * pSrc,     int nSrcStep, 
                      Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_AC4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_AC4IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                         Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                     Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                          Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_16u_C4IR(const Mpp16u * pSrc,     int nSrcStep, 
                      Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                     Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C1IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C1IR(const Mpp32s * pSrc,     int nSrcStep, 
                      Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                     Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C3IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C3IR(const Mpp32s * pSrc,     int nSrcStep, 
                      Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_AC4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_AC4IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                         Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                     Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                          Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiOr_32s_C4IR(const Mpp32s * pSrc,     int nSrcStep, 
                      Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_or */ 

/** 
 * \section image_xor Xor
 * @defgroup image_xor Xor
 *
 * Pixel by pixel logical exclusive or of images.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C1IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C1IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C3IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C3IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                          Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                      Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_AC4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                           Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_AC4IR(const Mpp8u * pSrc,     int nSrcStep, 
                       Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                         Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                     Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C4IR_Ctx(const Mpp8u * pSrc,     int nSrcStep, 
                          Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 8-bit unsigned char channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_8u_C4IR(const Mpp8u * pSrc,     int nSrcStep, 
                      Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C1IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C1IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C3IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C3IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                           Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                       Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_AC4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                            Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_AC4IR(const Mpp16u * pSrc,     int nSrcStep, 
                        Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                          Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                      Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C4IR_Ctx(const Mpp16u * pSrc,     int nSrcStep, 
                           Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 16-bit unsigned short channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_16u_C4IR(const Mpp16u * pSrc,     int nSrcStep, 
                       Mpp16u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * One 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C1IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * One 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C1IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C3R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C3R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Three 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C3IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Three 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C3IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 32-bit signed integer channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                           Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical exclusive or with unmodified alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                       Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_AC4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                            Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical exclusive or with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_AC4IR(const Mpp32s * pSrc,     int nSrcStep, 
                        Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                          Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel image logical exclusive or.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                      Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI);
/** 
 * Four 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C4IR_Ctx(const Mpp32s * pSrc,     int nSrcStep, 
                           Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);
/** 
 * Four 32-bit signed integer channel in place image logical exclusive or.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiXor_32s_C4IR(const Mpp32s * pSrc,     int nSrcStep, 
                       Mpp32s * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_xor */ 

/** 
 * \section image_not Not
 * @defgroup image_not Not
 *
 * Pixel by pixel logical not of image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C1R_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C1R(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C1IR_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C1IR(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C3R_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C3R(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C3IR_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C3IR(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical not with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_AC4R_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical not with unmodified alpha.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_AC4R(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical not with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_AC4IR_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical not with unmodified alpha.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_AC4IR(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C4R_Ctx(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image logical not.
 * \param pSrc \ref source_image_pointer.
 * \param nSrcStep \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C4R(const Mpp8u * pSrc, int nSrcStep, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C4IR_Ctx(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image logical not.
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiNot_8u_C4IR(Mpp8u * pSrcDst,  int nSrcDstStep, MppiSize oSizeROI);

/** @} image_not */ 

/** @} image_logical_operations */ 


/** 
 * \section image_alpha_composition_operations Alpha Composition
 * @defgroup image_alpha_composition_operations Alpha Composition
 * The set of alpha composition operations available in the library.
 * @{  
 */ 

/** 
 * \section image_alphacompc AlphaCompC
 * @defgroup image_alphacompc AlphaCompC
 *
 * Composite two images using constant alpha values.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2,
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2,
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Three 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Four 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Four 8-bit unsigned char channel image composition with alpha using constant source alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                                 Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image composition with alpha using constant source alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, const Mpp8u * pSrc2, int nSrc2Step, Mpp8u nAlpha2, 
                             Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 8-bit signed char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8s_C1R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, Mpp8s nAlpha1, const Mpp8s * pSrc2, int nSrc2Step, Mpp8s nAlpha2,
                                Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit signed char channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_8s_C1R(const Mpp8s * pSrc1, int nSrc1Step, Mpp8s nAlpha1, const Mpp8s * pSrc2, int nSrc2Step, Mpp8s nAlpha2,
                            Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2,
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2,
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Three 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Four 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * Four 16-bit unsigned short channel image composition with alpha using constant source alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                                  Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image composition with alpha using constant source alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, const Mpp16u * pSrc2, int nSrc2Step, Mpp16u nAlpha2, 
                              Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 16-bit signed short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16s_C1R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, Mpp16s nAlpha1, const Mpp16s * pSrc2, int nSrc2Step, Mpp16s nAlpha2,
                                 Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_16s_C1R(const Mpp16s * pSrc1, int nSrc1Step, Mpp16s nAlpha1, const Mpp16s * pSrc2, int nSrc2Step, Mpp16s nAlpha2,
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit unsigned integer channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32u_C1R_Ctx(const Mpp32u * pSrc1, int nSrc1Step, Mpp32u nAlpha1, const Mpp32u * pSrc2, int nSrc2Step, Mpp32u nAlpha2,
                                 Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit unsigned integer channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32u_C1R(const Mpp32u * pSrc1, int nSrc1Step, Mpp32u nAlpha1, const Mpp32u * pSrc2, int nSrc2Step, Mpp32u nAlpha2,
                             Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit signed integer channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32s_C1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, Mpp32s nAlpha1, const Mpp32s * pSrc2, int nSrc2Step, Mpp32s nAlpha2,
                                 Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32s_C1R(const Mpp32s * pSrc1, int nSrc1Step, Mpp32s nAlpha1, const Mpp32s * pSrc2, int nSrc2Step, Mpp32s nAlpha2,
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit floating point channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0.0 - 1.0).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0.0 - 1.0).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32f_C1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, Mpp32f nAlpha1, const Mpp32f * pSrc2, int nSrc2Step, Mpp32f nAlpha2,
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image composition using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0.0 - 1.0).
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param nAlpha2 Image alpha opacity (0.0 - 1.0).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaCompC_32f_C1R(const Mpp32f * pSrc1, int nSrc1Step, Mpp32f nAlpha1, const Mpp32f * pSrc2, int nSrc2Step, Mpp32f nAlpha2,
                             Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI,   MppiAlphaOp eAlphaOp);

/** @} image_alphacompc */ 

/** 
 * @defgroup image_alphapremulc AlphaPremulC
 * 
 * Premultiplies pixels of an image using a constant alpha value.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C1R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * One 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C1IR_Ctx(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */

MppStatus 
mppiAlphaPremulC_8u_C1IR(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C3R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C3R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Three 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C3IR_Ctx(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C3IR(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C4R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C4IR_Ctx(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_C4IR(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel image premultiplication with alpha using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image premultiplication with alpha using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u nAlpha1, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication with alpha using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_AC4IR_Ctx(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication with alpha using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_8u_AC4IR(Mpp8u nAlpha1, Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C1R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * One 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C1IR_Ctx(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C1IR(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C3R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C3R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Three 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C3IR_Ctx(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Three 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C3IR(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image premultiplication using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C4R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C4IR_Ctx(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_C4IR(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image premultiplication with alpha using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image premultiplication with alpha using constant alpha.
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u nAlpha1, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication with alpha using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_AC4IR_Ctx(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication with alpha using constant alpha.
 * \param nAlpha1 Image alpha opacity (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremulC_16u_AC4IR(Mpp16u nAlpha1, Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_alphapremulc */ 

/** 
 * \section image_alphacomp AlphaComp
 * @defgroup image_alphacomp AlphaComp
 *
 * Composite two images using alpha opacity values contained in each image.
 *
 * @{
 */

/** 
 * One 8-bit unsigned char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8u_AC1R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit unsigned char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8u_AC1R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * Four 8-bit unsigned char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                                Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, const Mpp8u * pSrc2, int nSrc2Step, 
                            Mpp8u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 8-bit signed char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8s_AC1R_Ctx(const Mpp8s * pSrc1, int nSrc1Step, const Mpp8s * pSrc2, int nSrc2Step, 
                                Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 8-bit signed char channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_8s_AC1R(const Mpp8s * pSrc1, int nSrc1Step, const Mpp8s * pSrc2, int nSrc2Step, 
                            Mpp8s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 16-bit unsigned short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16u_AC1R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit unsigned short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16u_AC1R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * Four 16-bit unsigned short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                                 Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, const Mpp16u * pSrc2, int nSrc2Step, 
                             Mpp16u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 16-bit signed short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16s_AC1R_Ctx(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                                 Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 16-bit signed short channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_16s_AC1R(const Mpp16s * pSrc1, int nSrc1Step, const Mpp16s * pSrc2, int nSrc2Step, 
                             Mpp16s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit unsigned integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32u_AC1R_Ctx(const Mpp32u * pSrc1, int nSrc1Step, const Mpp32u * pSrc2, int nSrc2Step, 
                                 Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit unsigned integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32u_AC1R(const Mpp32u * pSrc1, int nSrc1Step, const Mpp32u * pSrc2, int nSrc2Step, 
                             Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * Four 32-bit unsigned integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32u_AC4R_Ctx(const Mpp32u * pSrc1, int nSrc1Step, const Mpp32u * pSrc2, int nSrc2Step, 
                                 Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit unsigned integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32u_AC4R(const Mpp32u * pSrc1, int nSrc1Step, const Mpp32u * pSrc2, int nSrc2Step, 
                             Mpp32u * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit signed integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32s_AC1R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                                 Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit signed integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32s_AC1R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * Four 32-bit signed integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32s_AC4R_Ctx(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                                 Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit signed integer channel image composition using image alpha values (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32s_AC4R(const Mpp32s * pSrc1, int nSrc1Step, const Mpp32s * pSrc2, int nSrc2Step, 
                             Mpp32s * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * One 32-bit floating point channel image composition using image alpha values (0.0 - 1.0).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32f_AC1R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * One 32-bit floating point channel image composition using image alpha values (0.0 - 1.0).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32f_AC1R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                             Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** 
 * Four 32-bit floating point channel image composition using image alpha values (0.0 - 1.0).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32f_AC4R_Ctx(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                                 Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp, MppStreamContext mppStreamCtx);

/** 
 * Four 32-bit floating point channel image composition using image alpha values (0.0 - 1.0).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pSrc2 \ref source_image_pointer.
 * \param nSrc2Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param eAlphaOp alpha-blending operation.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaComp_32f_AC4R(const Mpp32f * pSrc1, int nSrc1Step, const Mpp32f * pSrc2, int nSrc2Step, 
                             Mpp32f * pDst,  int nDstStep,  MppiSize oSizeROI, MppiAlphaOp eAlphaOp);

/** @} image_alphacomp */ 

/** 
 * @defgroup image_alphapremul AlphaPremul
 * 
 * Premultiplies image pixels by image alpha opacity values.
 *
 * @{
 */

/** 
 * Four 8-bit unsigned char channel image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_8u_AC4R_Ctx(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_8u_AC4R(const Mpp8u * pSrc1, int nSrc1Step, Mpp8u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_8u_AC4IR_Ctx(Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 8-bit unsigned char channel in place image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_8u_AC4IR(Mpp8u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_16u_AC4R_Ctx(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrc1 \ref source_image_pointer.
 * \param nSrc1Step \ref source_image_line_step.
 * \param pDst \ref destination_image_pointer.
 * \param nDstStep \ref destination_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_16u_AC4R(const Mpp16u * pSrc1, int nSrc1Step, Mpp16u * pDst, int nDstStep, MppiSize oSizeROI);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \param mppStreamCtx \ref application_managed_stream_context. 
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_16u_AC4IR_Ctx(Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI, MppStreamContext mppStreamCtx);

/** 
 * Four 16-bit unsigned short channel in place image premultiplication with pixel alpha (0 - max channel pixel value).
 * \param pSrcDst \ref in_place_image_pointer.
 * \param nSrcDstStep \ref in_place_image_line_step.
 * \param oSizeROI \ref roi_specification.
 * \return \ref image_data_error_codes, \ref roi_error_codes.
 */
MppStatus 
mppiAlphaPremul_16u_AC4IR(Mpp16u * pSrcDst, int nSrcDstStep, MppiSize oSizeROI);

/** @} image_alphapremul */ 

/** @} image_alpha_composition_operations */ 

/** @} image_arithmetic_and_logical_operations */ 

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* MC_MPPI_ARITHMETIC_AND_LOGICAL_OPERATIONS_H */
